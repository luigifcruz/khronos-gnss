/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: aulora.proto */

#ifndef PROTOBUF_C_aulora_2eproto__INCLUDED
#define PROTOBUF_C_aulora_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Location Location;
typedef struct _Payload Payload;
typedef struct _Request Request;
typedef struct _Pod Pod;
typedef struct _Data Data;
typedef struct _Plane Plane;
typedef struct _Vessel Vessel;
typedef struct _Vehicle Vehicle;
typedef struct _Balloon Balloon;
typedef struct _Report Report;
typedef struct _Spacecraft Spacecraft;
typedef struct _Weather Weather;
typedef struct _Message Message;
typedef struct _Audio Audio;
typedef struct _File File;


/* --- enums --- */


/* --- messages --- */

struct  _Location
{
  ProtobufCMessage base;
  float latitude;
  float longitude;
  uint32_t altitude;
};
#define LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&location__descriptor) \
    , 0, 0, 0 }


struct  _Payload
{
  ProtobufCMessage base;
  uint32_t chunk;
  uint32_t chunk_num;
  ProtobufCBinaryData hash_key;
  ProtobufCBinaryData data;
};
#define PAYLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&payload__descriptor) \
    , 0, 0, {0,NULL}, {0,NULL} }


struct  _Request
{
  ProtobufCMessage base;
  uint32_t chunk;
  ProtobufCBinaryData hash_key;
};
#define REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&request__descriptor) \
    , 0, {0,NULL} }


struct  _Pod
{
  ProtobufCMessage base;
  char *sender;
  Location *source;
  Location *destination;
  uint32_t timestamp;
  uint32_t flight_radius;
  uint32_t priority;
  uint32_t hops;
  Payload *payload;
  Request *request;
};
#define POD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pod__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL, 0, 0, 0, 0, NULL, NULL }


struct  _Data
{
  ProtobufCMessage base;
  size_t n_report;
  Report **report;
  size_t n_weather;
  Weather **weather;
  size_t n_message;
  Message **message;
  size_t n_audio;
  Audio **audio;
  size_t n_file;
  File **file;
  Balloon *balloon;
  Plane *plane;
  Vessel *vessel;
  Vehicle *vehicle;
  Spacecraft *spacecraft;
  char *author;
  uint32_t timestamp;
  Location *location;
};
#define DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&data__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, (char *)protobuf_c_empty_string, 0, NULL }


struct  _Plane
{
  ProtobufCMessage base;
  uint32_t wind_speed;
  uint32_t ground_speed;
  char *squawk;
};
#define PLANE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&plane__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string }


struct  _Vessel
{
  ProtobufCMessage base;
  char *name;
};
#define VESSEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vessel__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Vehicle
{
  ProtobufCMessage base;
  uint32_t speed;
};
#define VEHICLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vehicle__descriptor) \
    , 0 }


struct  _Balloon
{
  ProtobufCMessage base;
  uint32_t speed;
};
#define BALLOON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&balloon__descriptor) \
    , 0 }


struct  _Report
{
  ProtobufCMessage base;
  char *subject;
  char *body;
};
#define REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&report__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  _Spacecraft
{
  ProtobufCMessage base;
  char *name;
};
#define SPACECRAFT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&spacecraft__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  _Weather
{
  ProtobufCMessage base;
  uint32_t timestamp;
  float temperature;
  float humidity;
  float pressure;
};
#define WEATHER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&weather__descriptor) \
    , 0, 0, 0, 0 }


struct  _Message
{
  ProtobufCMessage base;
  char *receiver;
  char *body;
  Location *location;
};
#define MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&message__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


struct  _Audio
{
  ProtobufCMessage base;
  char *receiver;
  char *duration;
  ProtobufCBinaryData blob;
};
#define AUDIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&audio__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


struct  _File
{
  ProtobufCMessage base;
  char *receiver;
  char *name;
  ProtobufCBinaryData blob;
};
#define FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL} }


/* Location methods */
void   location__init
                     (Location         *message);
size_t location__get_packed_size
                     (const Location   *message);
size_t location__pack
                     (const Location   *message,
                      uint8_t             *out);
size_t location__pack_to_buffer
                     (const Location   *message,
                      ProtobufCBuffer     *buffer);
Location *
       location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   location__free_unpacked
                     (Location *message,
                      ProtobufCAllocator *allocator);
/* Payload methods */
void   payload__init
                     (Payload         *message);
size_t payload__get_packed_size
                     (const Payload   *message);
size_t payload__pack
                     (const Payload   *message,
                      uint8_t             *out);
size_t payload__pack_to_buffer
                     (const Payload   *message,
                      ProtobufCBuffer     *buffer);
Payload *
       payload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   payload__free_unpacked
                     (Payload *message,
                      ProtobufCAllocator *allocator);
/* Request methods */
void   request__init
                     (Request         *message);
size_t request__get_packed_size
                     (const Request   *message);
size_t request__pack
                     (const Request   *message,
                      uint8_t             *out);
size_t request__pack_to_buffer
                     (const Request   *message,
                      ProtobufCBuffer     *buffer);
Request *
       request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   request__free_unpacked
                     (Request *message,
                      ProtobufCAllocator *allocator);
/* Pod methods */
void   pod__init
                     (Pod         *message);
size_t pod__get_packed_size
                     (const Pod   *message);
size_t pod__pack
                     (const Pod   *message,
                      uint8_t             *out);
size_t pod__pack_to_buffer
                     (const Pod   *message,
                      ProtobufCBuffer     *buffer);
Pod *
       pod__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pod__free_unpacked
                     (Pod *message,
                      ProtobufCAllocator *allocator);
/* Data methods */
void   data__init
                     (Data         *message);
size_t data__get_packed_size
                     (const Data   *message);
size_t data__pack
                     (const Data   *message,
                      uint8_t             *out);
size_t data__pack_to_buffer
                     (const Data   *message,
                      ProtobufCBuffer     *buffer);
Data *
       data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   data__free_unpacked
                     (Data *message,
                      ProtobufCAllocator *allocator);
/* Plane methods */
void   plane__init
                     (Plane         *message);
size_t plane__get_packed_size
                     (const Plane   *message);
size_t plane__pack
                     (const Plane   *message,
                      uint8_t             *out);
size_t plane__pack_to_buffer
                     (const Plane   *message,
                      ProtobufCBuffer     *buffer);
Plane *
       plane__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   plane__free_unpacked
                     (Plane *message,
                      ProtobufCAllocator *allocator);
/* Vessel methods */
void   vessel__init
                     (Vessel         *message);
size_t vessel__get_packed_size
                     (const Vessel   *message);
size_t vessel__pack
                     (const Vessel   *message,
                      uint8_t             *out);
size_t vessel__pack_to_buffer
                     (const Vessel   *message,
                      ProtobufCBuffer     *buffer);
Vessel *
       vessel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vessel__free_unpacked
                     (Vessel *message,
                      ProtobufCAllocator *allocator);
/* Vehicle methods */
void   vehicle__init
                     (Vehicle         *message);
size_t vehicle__get_packed_size
                     (const Vehicle   *message);
size_t vehicle__pack
                     (const Vehicle   *message,
                      uint8_t             *out);
size_t vehicle__pack_to_buffer
                     (const Vehicle   *message,
                      ProtobufCBuffer     *buffer);
Vehicle *
       vehicle__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vehicle__free_unpacked
                     (Vehicle *message,
                      ProtobufCAllocator *allocator);
/* Balloon methods */
void   balloon__init
                     (Balloon         *message);
size_t balloon__get_packed_size
                     (const Balloon   *message);
size_t balloon__pack
                     (const Balloon   *message,
                      uint8_t             *out);
size_t balloon__pack_to_buffer
                     (const Balloon   *message,
                      ProtobufCBuffer     *buffer);
Balloon *
       balloon__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   balloon__free_unpacked
                     (Balloon *message,
                      ProtobufCAllocator *allocator);
/* Report methods */
void   report__init
                     (Report         *message);
size_t report__get_packed_size
                     (const Report   *message);
size_t report__pack
                     (const Report   *message,
                      uint8_t             *out);
size_t report__pack_to_buffer
                     (const Report   *message,
                      ProtobufCBuffer     *buffer);
Report *
       report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   report__free_unpacked
                     (Report *message,
                      ProtobufCAllocator *allocator);
/* Spacecraft methods */
void   spacecraft__init
                     (Spacecraft         *message);
size_t spacecraft__get_packed_size
                     (const Spacecraft   *message);
size_t spacecraft__pack
                     (const Spacecraft   *message,
                      uint8_t             *out);
size_t spacecraft__pack_to_buffer
                     (const Spacecraft   *message,
                      ProtobufCBuffer     *buffer);
Spacecraft *
       spacecraft__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   spacecraft__free_unpacked
                     (Spacecraft *message,
                      ProtobufCAllocator *allocator);
/* Weather methods */
void   weather__init
                     (Weather         *message);
size_t weather__get_packed_size
                     (const Weather   *message);
size_t weather__pack
                     (const Weather   *message,
                      uint8_t             *out);
size_t weather__pack_to_buffer
                     (const Weather   *message,
                      ProtobufCBuffer     *buffer);
Weather *
       weather__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   weather__free_unpacked
                     (Weather *message,
                      ProtobufCAllocator *allocator);
/* Message methods */
void   message__init
                     (Message         *message);
size_t message__get_packed_size
                     (const Message   *message);
size_t message__pack
                     (const Message   *message,
                      uint8_t             *out);
size_t message__pack_to_buffer
                     (const Message   *message,
                      ProtobufCBuffer     *buffer);
Message *
       message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   message__free_unpacked
                     (Message *message,
                      ProtobufCAllocator *allocator);
/* Audio methods */
void   audio__init
                     (Audio         *message);
size_t audio__get_packed_size
                     (const Audio   *message);
size_t audio__pack
                     (const Audio   *message,
                      uint8_t             *out);
size_t audio__pack_to_buffer
                     (const Audio   *message,
                      ProtobufCBuffer     *buffer);
Audio *
       audio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   audio__free_unpacked
                     (Audio *message,
                      ProtobufCAllocator *allocator);
/* File methods */
void   file__init
                     (File         *message);
size_t file__get_packed_size
                     (const File   *message);
size_t file__pack
                     (const File   *message,
                      uint8_t             *out);
size_t file__pack_to_buffer
                     (const File   *message,
                      ProtobufCBuffer     *buffer);
File *
       file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file__free_unpacked
                     (File *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Location_Closure)
                 (const Location *message,
                  void *closure_data);
typedef void (*Payload_Closure)
                 (const Payload *message,
                  void *closure_data);
typedef void (*Request_Closure)
                 (const Request *message,
                  void *closure_data);
typedef void (*Pod_Closure)
                 (const Pod *message,
                  void *closure_data);
typedef void (*Data_Closure)
                 (const Data *message,
                  void *closure_data);
typedef void (*Plane_Closure)
                 (const Plane *message,
                  void *closure_data);
typedef void (*Vessel_Closure)
                 (const Vessel *message,
                  void *closure_data);
typedef void (*Vehicle_Closure)
                 (const Vehicle *message,
                  void *closure_data);
typedef void (*Balloon_Closure)
                 (const Balloon *message,
                  void *closure_data);
typedef void (*Report_Closure)
                 (const Report *message,
                  void *closure_data);
typedef void (*Spacecraft_Closure)
                 (const Spacecraft *message,
                  void *closure_data);
typedef void (*Weather_Closure)
                 (const Weather *message,
                  void *closure_data);
typedef void (*Message_Closure)
                 (const Message *message,
                  void *closure_data);
typedef void (*Audio_Closure)
                 (const Audio *message,
                  void *closure_data);
typedef void (*File_Closure)
                 (const File *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor location__descriptor;
extern const ProtobufCMessageDescriptor payload__descriptor;
extern const ProtobufCMessageDescriptor request__descriptor;
extern const ProtobufCMessageDescriptor pod__descriptor;
extern const ProtobufCMessageDescriptor data__descriptor;
extern const ProtobufCMessageDescriptor plane__descriptor;
extern const ProtobufCMessageDescriptor vessel__descriptor;
extern const ProtobufCMessageDescriptor vehicle__descriptor;
extern const ProtobufCMessageDescriptor balloon__descriptor;
extern const ProtobufCMessageDescriptor report__descriptor;
extern const ProtobufCMessageDescriptor spacecraft__descriptor;
extern const ProtobufCMessageDescriptor weather__descriptor;
extern const ProtobufCMessageDescriptor message__descriptor;
extern const ProtobufCMessageDescriptor audio__descriptor;
extern const ProtobufCMessageDescriptor file__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_aulora_2eproto__INCLUDED */
